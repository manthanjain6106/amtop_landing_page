# Multi-stage build for production
FROM node:18-alpine AS base

# Install dependencies for native modules
RUN apk add --no-cache python3 make g++ curl

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci --only=production

# Build stage
FROM base AS builder

# Copy source code
COPY . .

# Build the application
RUN npm run build

# Production stage
FROM node:18-alpine AS production

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init

# Create app user
RUN addgroup -g 1001 -S nodejs
RUN adduser -S amtop -u 1001

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install only production dependencies
RUN npm ci --only=production

# Copy built application
COPY --from=builder --chown=amtop:nodejs /app/.next ./.next
COPY --from=builder --chown=amtop:nodejs /app/public ./public
COPY --from=builder --chown=amtop:nodejs /app/next.config.ts ./
COPY --from=builder --chown=amtop:nodejs /app/tailwind.config.ts ./
COPY --from=builder --chown=amtop:nodejs /app/tsconfig.json ./

# Create necessary directories
RUN mkdir -p /app/logs /app/temp
RUN chown -R amtop:nodejs /app/logs /app/temp

# Switch to non-root user
USER amtop

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3000/api/health || exit 1

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["npm", "start"]
